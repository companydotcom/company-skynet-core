!function(t){var e={};function r(o){if(e[o])return e[o].exports;var s=e[o]={i:o,l:!1,exports:{}};return t[o].call(s.exports,s,s.exports,r),s.l=!0,s.exports}r.m=t,r.c=e,r.d=function(t,e,o){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(r.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)r.d(o,s,function(e){return t[e]}.bind(null,s));return o},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=2)}([function(t,e,r){"use strict";r.r(e),r.d(e,"parseJson",(function(){return o})),r.d(e,"deepParseJson",(function(){return s})),r.d(e,"formatHttpResponse",(function(){return a})),r.d(e,"getErrorString",(function(){return n})),r.d(e,"neverThrowError",(function(){return i})),r.d(e,"sleep",(function(){return c})),r.d(e,"itemExists",(function(){return l})),r.d(e,"evaluateSharedMicroApplicationData",(function(){return u}));const o=t=>{try{return JSON.parse(t)}catch(e){return t}},s=t=>{if("string"!=typeof t)return Array.isArray(t)?t.map(t=>s(t)):"object"==typeof t&&null!==t?Object.keys(t).reduce((e,r)=>(e[r]=s(t[r]),e),{}):t;if(!isNaN(Number(t)))return t;try{return s(JSON.parse(t))}catch(e){return t}},a=(t,e,r)=>{const o=(t=>{switch(t){case 200:return"OK";case 201:return"Created";case 400:return"Bad Request";case 500:return"Internal Server Error";default:return}})(t),s=`HTTP Resp: ${t}${o?" - "+o:""}`;let a={};return r instanceof Error?a.error=r.toString():"object"==typeof r?a=r:a.message=r,{statusCode:t,headers:{"Access-Control-Allow-Origin":"*","Access-Control-Allow-Credentials":!0},body:JSON.stringify({resp:s,input:e,resultObj:a})}},n=t=>t instanceof Error?t.toString():"object"==typeof t?JSON.stringify(t,null,4):t,i=async(t,e)=>{const r={status:"pass",params:t};try{r.workerResp=await e(t)}catch(t){r.status="fail",r.error=n(t)}return r},c=async t=>new Promise(e=>setTimeout(()=>{e()},t)),l=(t,e)=>"object"==typeof t&&null!==t&&Object.prototype.hasOwnProperty.call(t,e),u=(t,e)=>{const r={};for(const[o,s]of Object.entries(t))s.microApplicationsToShareWith&&(s.servicesToShareWith.includes(e)||s.servicesToShareWith.includes("*"))&&(r[o]=s);return r}},,function(t,e,r){"use strict";var o;r.r(e),r.d(e,"fetchHandler",(function(){return j})),r.d(e,"bulkFetchHandler",(function(){return S})),r.d(e,"directTransitionHandler",(function(){return A})),r.d(e,"bulkTransitionHandler",(function(){return N})),r.d(e,"webhookHandler",(function(){return F})),r.d(e,"setupDatabase",(function(){return k})),r.d(e,"httpReqHandler",(function(){return I}));var s=new Uint8Array(16);function a(){if(!o&&!(o="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return o(s)}var n=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;for(var i=function(t){return"string"==typeof t&&n.test(t)},c=[],l=0;l<256;++l)c.push((l+256).toString(16).substr(1));var u=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,r=(c[t[e+0]]+c[t[e+1]]+c[t[e+2]]+c[t[e+3]]+"-"+c[t[e+4]]+c[t[e+5]]+"-"+c[t[e+6]]+c[t[e+7]]+"-"+c[t[e+8]]+c[t[e+9]]+"-"+c[t[e+10]]+c[t[e+11]]+c[t[e+12]]+c[t[e+13]]+c[t[e+14]]+c[t[e+15]]).toLowerCase();if(!i(r))throw TypeError("Stringified UUID is invalid");return r};var d=function(t,e,r){var o=(t=t||{}).random||(t.rng||a)();if(o[6]=15&o[6]|64,o[8]=63&o[8]|128,e){r=r||0;for(var s=0;s<16;++s)e[r+s]=o[s];return e}return u(o)},p=r(0);const m=async(t,e,r=!1)=>{const o=new t.DynamoDB({apiVersion:"2012-08-10"});Object(p.itemExists)(e,"Limit")||(e.Limit=1e3);try{const s=await o.query(e).promise();return!0===r?!Object(p.itemExists)(s,"Items")||s.Items.length<1?{items:[],ExclusiveStartKey:void 0}:{items:s.Items.map(e=>t.DynamoDB.Converter.unmarshall(e)),ExclusiveStartKey:Object(p.itemExists)(s,"LastEvaluatedKey")?s.LastEvaluatedKey:void 0}:!Object(p.itemExists)(s,"Items")||s.Items.length<1?[]:s.Items.map(e=>t.DynamoDB.Converter.unmarshall(e))}catch(t){throw t}},y=async(t,e,r,o,s)=>{const a={TableName:e,Key:r,UpdateExpression:`ADD ${o} :val`,ExpressionAttributeValues:{":val":s}};return(new t.DynamoDB.DocumentClient).update(a).promise()},h=async(t,e,r,o=1e3)=>{const s=new t.DynamoDB({apiVersion:"2012-08-10"}),a=e.map(e=>({PutRequest:{Item:t.DynamoDB.Converter.marshall(e)}})),n=[];for(;a.length>0;)n.push(s.batchWriteItem({RequestItems:{[r]:a.splice(0,25)}}).promise());console.log(`DYNAMODB SERVICE: batchPutIntoDynamoDb: totalBulkRequestsSent: ${n.length} with each request having 25 records except the last one having ${e.length-25*(n.length-1)} records`);try{const e=(await Promise.all(n)).map(e=>Object(p.itemExists)(e,"UnprocessedItems")&&Object(p.itemExists)(e.UnprocessedItems,r)&&e.UnprocessedItems[r].length>0?e.UnprocessedItems[r].map(e=>t.DynamoDB.Converter.unmarshall(e.PutRequest.Item)):[]).reduce((t,e)=>t.concat(e));return!(e.length>0)||(await Object(p.sleep)(o),h(t,e,r,o+1e3))}catch(t){throw t}},g=t=>{if((t=>"string"==typeof t)(t))return"String";if((t=>"number"==typeof t)(t))return"Number";if((t=>Array.isArray(t))(t))return"String.Array";throw new Error(`Invalid MessageAttribute type: ${typeof t} for value ${t}. Valid types: String, Number, Array.`)},f=t=>Object.keys(t).reduce((e,r)=>{const o=t[r];if(void 0===o)return e;const s=g(o);return{...e,[r]:{DataType:s,StringValue:"String.Array"===s?JSON.stringify(o):o.toString()}}},{});var b=async(t,e,r,o={},s={})=>{const a=new t.SNS({apiVersion:"2010-03-31"});let n;try{const t={Message:JSON.stringify(r),TopicArn:e,MessageAttributes:f(o),...s};return n=await a.publish(t).promise(),console.log("SNS Publish - Success: ",JSON.stringify(t)),n}catch(t){return console.log("SNS Publish - Failure: ",t.toString()),t}};const{deepParseJson:w}=r(0),O=t=>{let e=t.Body?t.Body:t.body,r={};try{e=t.Body?w(t.Body):w(t.body)}catch(t){throw console.log("Error: withSqsConsumer - parseMsg: Did not get a JSON parsable message in body"),t}var o;return void 0!==e.MessageAttributes&&(o=e.MessageAttributes,r=Object.keys(o).reduce((t,e)=>{const{Type:r,Value:s}=o[e];return"String"!==r&&"Number"!==r?{...t,[e]:JSON.parse(s)}:{...t,[e]:s}},{})),{msgBody:e.Message,msgAttribs:r,rcptHandle:t.ReceiptHandle}},v=async(t,e,r,o)=>{console.log("Fetching messages from SQS URL: "+o);const s=new t.SQS({region:e});let a=[];const n=[];let i=r<500?r:500;for(;i>0;){const t=i<10?i:10;i-=t,n.push(s.receiveMessage({QueueUrl:o,MaxNumberOfMessages:t,VisibilityTimeout:900}).promise())}return(await Promise.all(n)).forEach(t=>{void 0!==t.Messages&&t.Messages.length>0&&(a=[...a,...t.Messages])}),a},E=async(t,e)=>(await m(t,{TableName:"Account",ExpressionAttributeNames:{"#pk":"accountId"},KeyConditionExpression:"#pk = :accId",ExpressionAttributeValues:{":accId":{S:e}}}))[0],x=async(t,e)=>(await m(t,{TableName:"User",ExpressionAttributeNames:{"#pk":"userId"},KeyConditionExpression:"#pk = :uId",ExpressionAttributeValues:{":uId":{S:e}}}))[0],R=async(t,e,r,o,{msgBody:s,msgAttribs:a,rcptHandle:n},i)=>{const c=await m(t,{TableName:"vendorConfig",ExpressionAttributeNames:{"#pk":"service"},KeyConditionExpression:"#pk = :serv",ExpressionAttributeValues:{":serv":{S:""+r}}});let l={};if(Object(p.itemExists)(s,"context")&&Object(p.itemExists)(s.context,"user")&&Object(p.itemExists)(s.context.user,"accountId")){const e=await E(t,s.context.user.accountId);Object(p.itemExists)(e,"vendorData")&&Object(p.itemExists)(e.vendorData,""+r)&&(l=e.vendorData[""+r]),Object(p.itemExists)(s.context,o)||(s.context.account=e)}let u={};if(Object(p.itemExists)(s,"context")&&Object(p.itemExists)(s.context,"user")&&Object(p.itemExists)(s.context.user,"accountId")){const e=await E(t,s.context.user.accountId);Object(p.itemExists)(e,"sharedMicroApplicationAccountData")&&(u=Object(p.evaluateSharedMicroApplicationData)(e.sharedMicroApplicationAccountData,r)),Object(p.itemExists)(s.context,o)||(s.context.account=e)}let y={};if(Object(p.itemExists)(s,"context")&&Object(p.itemExists)(s.context,"user")&&Object(p.itemExists)(s.context.user,"userId")){const e=await x(t,s.context.user.userId);Object(p.itemExists)(e,"vendorData")&&Object(p.itemExists)(e.vendorData,""+r)&&(y=e.vendorData[""+r])}let g={};if(Object(p.itemExists)(s,"context")&&Object(p.itemExists)(s.context,"user")&&Object(p.itemExists)(s.context.user,"userId")){const e=await x(t,s.context.user.userId);Object(p.itemExists)(e,"sharedVendorData")&&(g=Object(p.evaluateSharedMicroApplicationData)(e.sharedMicroApplicationUserData,r))}const f=await Object(p.neverThrowError)({message:s,serviceConfigData:void 0!==c&&Array.isArray(c)&&c.length>0&&void 0!==c[0].configdata?c[0].configdata:[],serviceAccountData:l,sharedMicroApplicationAccountData:u,serviceUserData:y,sharedMicroApplicationUserData:g,attributes:a},i);if(console.log("processMessage: INFO: Result from worker is "+JSON.stringify(f,null,4)),Object(p.itemExists)(f.workerResp,"serviceAccountData")){if("object"!=typeof f.workerResp.serviceAccountData)throw new Error("Service specific user account data should be an object");if(Object(p.itemExists)(s,"context")&&Object(p.itemExists)(s.context,"user")&&Object(p.itemExists)(s.context.user,"accountId")){const e=await E(t,s.context.user.accountId);Object(p.itemExists)(e,"vendorData")||(e.vendorData={}),Object(p.itemExists)(e.vendorData,""+r)||(e.vendorData[""+r]={}),e.vendorData[""+r]={...e.vendorData[""+r],...f.workerResp.serviceAccountData},await h(t,[e],"Account")}}if(Object(p.itemExists)(f.workerResp,"sharedMicroApplicationAccountData")){if("object"!=typeof f.workerResp.sharedMicroApplicationAccountData)throw new Error("Shared service account data should be an object");if(Object(p.itemExists)(s,"context")&&Object(p.itemExists)(s.context,"user")&&Object(p.itemExists)(s.context.user,"accountId")){const e=await E(t,s.context.user.accountId);Object(p.itemExists)(e,"sharedVendorData")||(e.sharedVendorData={}),Object(p.itemExists)(e.sharedVendorData,""+r)||(e.sharedVendorData[""+r]={}),e.sharedVendorData[""+r]={...e.sharedVendorData[""+r],...f.workerResp.sharedMicroApplicationAccountData},await h(t,[e],"Account")}}if(Object(p.itemExists)(f.workerResp,"serviceUserData")){if("object"!=typeof f.workerResp.serviceUserData)throw new Error("Service specific user data should be an object");if(Object(p.itemExists)(s,"context")&&Object(p.itemExists)(s.context,"user")&&Object(p.itemExists)(s.context.user,"userId")){const e=await x(t,s.context.user.userId);Object(p.itemExists)(e,"vendorData")||(e.vendorData={}),Object(p.itemExists)(e.vendorData,""+r)||(e.vendorData[""+r]={}),e.vendorData[""+r]={...e.vendorData[""+r],...f.workerResp.serviceUserData},await h(t,[e],"User")}}if(Object(p.itemExists)(f.workerResp,"sharedMicroApplicationUserData")){if("object"!=typeof f.workerResp.sharedMicroApplicationUserData)throw new Error("Shared service user data should be an object");if(Object(p.itemExists)(s,"context")&&Object(p.itemExists)(s.context,"user")&&Object(p.itemExists)(s.context.user,"userId")){const e=await x(t,s.context.user.userId);Object(p.itemExists)(e,"sharedMicroApplicationUserData")||(e.sharedMicroApplicationUserData={}),Object(p.itemExists)(e.sharedMicroApplicationUserData,""+r)||(e.sharedMicroApplicationUserData[""+r]={}),e.sharedMicroApplicationUserData[""+r]={...e.sharedMicroApplicationUserData[""+r],...f.workerResp.sharedMicroApplicationUserData},await h(t,[e],"User")}}if(Object(p.itemExists)(f.workerResp,"crmData")){if("object"!=typeof f.workerResp.crmData)throw new Error("Data going to a CRM should be an object");Object.keys(f.workerResp.crmData).length>0&&await b(t,`arn:aws:sns:${e}:${o}:event-bus`,{...s,payload:f.workerResp.crmData,metadata:{eventType:"sendFields",dateCreated:Date.now(),operationType:"update",invocationSource:r}},{...a,status:"trigger",eventType:"crm",eventId:d(),emitter:r})}let w;w=Object.prototype.hasOwnProperty.call(f,"workerResp")?Object.prototype.hasOwnProperty.call(f.workerResp,"res")?f.workerResp.res:f.workerResp:void 0;return await b(t,`arn:aws:sns:${e}:${o}:event-bus`,{...s,inputPayload:s.payload,payload:w},{...a,status:(t=>{let e=t.status;return Object.prototype.hasOwnProperty.call(t,"workerResp")&&Object.prototype.hasOwnProperty.call(t.workerResp,"extraStatus")&&(e=`${e}-${t.workerResp.extraStatus}`),e})(f),eventId:d(),emitter:r}),void 0!==n&&await(async(t,e,r,o)=>{new t.SQS({region:e}).deleteMessage({QueueUrl:r,ReceiptHandle:o}).promise()})(t,e,"transition"===a.eventType?`https://sqs.${e}.amazonaws.com/${o}/${r}-bulktq`:`https://sqs.${e}.amazonaws.com/${o}/${r}-bulkfq`,n),"fail"===f.status&&(async(t,e,r,o)=>{new t.SQS({region:e}).sendMessage({QueueUrl:r,MessageBody:o}).promise()})(t,e,`https://sqs.${e}.amazonaws.com/${o}/${r}-ldlq`,JSON.stringify({failedIn:r,body:{Message:s,MessageAttributes:a,Error:f.error}})),!0},D=async(t,{throttleLmts:e,safeThrottleLimit:r,reserveCapForDirect:o,retryCntForCapacity:s},a,n=!0,i=0)=>{if(i>s)return 0;i>0&&await Object(p.sleep)(1e3);const c=JSON.parse(e);if(void 0===c.day&&void 0===c.hour&&void 0===c.minute&&void 0===c.second)return 1e6;const l=!0===n?(1-o)*r:1*r,u=await(async(t,e)=>{const r=Date.now(),o=Math.floor(r/1e3)+1,s=o-o%60+60,a=s-s%3600+3600,n=a-a%86400+86400,i={TableName:"apiCallCount",ExpressionAttributeNames:{"#pk":"serviceAndDuration","#et":"expiryTime"},KeyConditionExpression:"#pk = :sd AND #et = :et"},c=[m(t,{...i,ExpressionAttributeValues:{":sd":{S:e+"-second"},":et":{N:o.toString()}}}),m(t,{...i,ExpressionAttributeValues:{":sd":{S:e+"-minute"},":et":{N:s.toString()}}}),m(t,{...i,ExpressionAttributeValues:{":sd":{S:e+"-hour"},":et":{N:a.toString()}}}),m(t,{...i,ExpressionAttributeValues:{":sd":{S:e+"-day"},":et":{N:n.toString()}}})],l=await Promise.all(c);return{second:l[0].callCount?l[0].callCount:0,minute:l[1].callCount?l[1].callCount:0,hour:l[2].callCount?l[2].callCount:0,day:l[3].callCount?l[3].callCount:0}})(t,a);let d="x";return void 0!==c.day&&(Math.floor(c.day*l-u.day)<d||"x"===d)&&(d=Math.floor((c.day-u.day)*l)),void 0!==c.hour&&(Math.floor(c.hour*l-u.hour)<d||"x"===d)&&(d=Math.floor((c.hour-u.hour)*l)),void 0!==c.minute&&(Math.floor(c.minute*l-u.minute)<d||"x"===d)&&(d=Math.floor((c.minute-u.minute)*l)),void 0!==c.second&&(Math.floor(c.second*l-u.second)<d||"x"===d)&&(d=Math.floor((c.second-u.second)*l)),d>0?d:D(t,{throttleLmts:e,safeThrottleLimit:r,reserveCapForDirect:o,retryCntForCapacity:s},a,n,i+1)},C=async(t,e,r=1)=>{const o=Date.now(),s=Math.floor(o/1e3)+1,a=s-s%60+60,n=a-a%3600+3600,i=n-n%86400+86400,c=[y(t,"apiCallCount",{serviceAndDuration:e+"-second",expiryTime:s},"callCount",r),y(t,"apiCallCount",{serviceAndDuration:e+"-minute",expiryTime:a},"callCount",r),y(t,"apiCallCount",{serviceAndDuration:e+"-hour",expiryTime:n},"callCount",r),y(t,"apiCallCount",{serviceAndDuration:e+"-day",expiryTime:i},"callCount",r)];return await Promise.all(c),!0},j=async(t,{throttleLmts:e,safeThrottleLimit:r,reserveCapForDirect:o,retryCntForCapacity:s},a,n,i,c,l,u)=>(async(t,{throttleLmts:e,safeThrottleLimit:r,reserveCapForDirect:o,retryCntForCapacity:s},a,n,i,c,l,u)=>{try{if(console.log("directFetch: INFO: Input is: "+("object"==typeof c?JSON.stringify(c,null,4):c)),void 0===c.Records||1!==c.Records.length)throw new Error(`directFetch: ERROR: Lambda was wrongly triggered with ${void 0===c.Records?0:c.Records.length} records`);const d=await D(t,{throttleLmts:e,safeThrottleLimit:r,reserveCapForDirect:o,retryCntForCapacity:s},n,!1);console.log("directFetch: INFO: Processing event "+JSON.stringify(c.Records.length,null,4));let p=[O(c.Records[0])];if(u&&(p=await u("fetch",!1,p)),!p.length)throw new Error("directFetch: ERROR: Processing complete.  Pre-worker hook rejected message.");if(d<1)throw new Error("directFetch: ERROR: No capacity to make a call");await C(t,n);const{msgBody:m,msgAttribs:y}=p[0];return await R(t,a,n,i,{msgBody:m,msgAttribs:y},l),"directFetch: INFO: Processing complete"}catch(t){throw console.log("directFetch: ERROR: "+Object(p.getErrorString)(t)),t}})(t,{throttleLmts:e,safeThrottleLimit:r,reserveCapForDirect:o,retryCntForCapacity:s},a,n,i,c,l,u),S=async(t,{throttleLmts:e,safeThrottleLimit:r,reserveCapForDirect:o,retryCntForCapacity:s},a,n,i,c,l,u)=>(async(t,{throttleLmts:e,safeThrottleLimit:r,reserveCapForDirect:o,retryCntForCapacity:s},a,n,i,c,l,u)=>{try{console.log("bulkFetch: INFO: Scheduled call started. Event is "+("object"==typeof c?JSON.stringify(c,null,4):c));const d=await D(t,{throttleLmts:e,safeThrottleLimit:r,reserveCapForDirect:o,retryCntForCapacity:s},n,!0);if(d<1)throw new Error("bulkFetch: ERROR: No capacity to make a call");const p=await v(t,a,d,`https://sqs.${a}.amazonaws.com/${i}/${n}-bulkfq`);console.log("bulkFetch: INFO: Processing event "+JSON.stringify(p.length,null,4));let m=p.map(t=>O(t));if(u&&(m=await u("fetch",!0,m)),m.length<1)return"bulkFetch: INFO: Processing complete";await C(t,n,p.length);const y=[];return m.forEach(e=>{y.push(R(t,a,n,i,e,l))}),await Promise.all(y),"bulkFetch: INFO: Processing complete"}catch(t){throw console.log("bulkFetch: ERROR: "+Object(p.getErrorString)(t)),t}})(t,{throttleLmts:e,safeThrottleLimit:r,reserveCapForDirect:o,retryCntForCapacity:s},a,n,i,c,l,u),A=async(t,{throttleLmts:e,safeThrottleLimit:r,reserveCapForDirect:o,retryCntForCapacity:s},a,n,i,c,l,u)=>(async(t,{throttleLmts:e,safeThrottleLimit:r,reserveCapForDirect:o,retryCntForCapacity:s},a,n,i,c,l,u)=>{try{if(console.log("directTransition: INFO: Input is: "+("object"==typeof c?JSON.stringify(c,null,4):c)),void 0===c.Records||1!==c.Records.length)throw new Error(`directTransition: ERROR: Lambda was wrongly triggered with ${void 0===c.Records?0:c.Records.length} records`);const d=await D(t,{throttleLmts:e,safeThrottleLimit:r,reserveCapForDirect:o,retryCntForCapacity:s},n,!1);console.log("directTransition: INFO: Processing event "+JSON.stringify(c.Records.length,null,4));let p=[O(c.Records[0])];if(u&&(p=await u("fetch",!1,p)),!p.length)throw new Error("directFetch: ERROR: Processing complete.  Pre-worker hook rejected message.");if(d<1)throw new Error("directTransition: ERROR: No capacity to make a call");await C(t,n);const{msgBody:m,msgAttribs:y}=p[0];return await R(t,a,n,i,{msgBody:m,msgAttribs:y},l),"directTransition: INFO: Processing complete"}catch(t){throw console.log("directTransition: ERROR: "+Object(p.getErrorString)(t)),t}})(t,{throttleLmts:e,safeThrottleLimit:r,reserveCapForDirect:o,retryCntForCapacity:s},a,n,i,c,l,u),N=async(t,{throttleLmts:e,safeThrottleLimit:r,reserveCapForDirect:o,retryCntForCapacity:s},a,n,i,c,l,u)=>(async(t,{throttleLmts:e,safeThrottleLimit:r,reserveCapForDirect:o,retryCntForCapacity:s},a,n,i,c,l,u)=>{try{console.log("bulkTransition: INFO: Scheduled call started. Event is "+("object"==typeof c?JSON.stringify(c,null,4):c));const d=await D(t,{throttleLmts:e,safeThrottleLimit:r,reserveCapForDirect:o,retryCntForCapacity:s},n,!0);if(d<1)throw new Error("bulkTransition: ERROR: No capacity to make a call");const p=await v(t,a,d,`https://sqs.${a}.amazonaws.com/${i}/${n}-bulktq`);console.log("bulkTransition: INFO: Processing event "+JSON.stringify(p.length,null,4));let m=p.map(t=>O(t));if(u&&(m=await u("transition",!0,m)),m.length<1)return"bulkTransition: INFO: Processing complete";await C(t,n,m.length);const y=[];return m.forEach(e=>{y.push(R(t,a,n,i,e,l))}),await Promise.all(y),"bulkTransition: INFO: Processing complete"}catch(t){throw console.log("bulkTransition: ERROR: "+Object(p.getErrorString)(t)),t}})(t,{throttleLmts:e,safeThrottleLimit:r,reserveCapForDirect:o,retryCntForCapacity:s},a,n,i,c,l,u),F=async(t,e,r,o,s,a,n)=>(async(t,e,r,o,s,a,n)=>{try{if(console.log("directTransition: INFO: Input is: "+("object"==typeof s?JSON.stringify(s,null,4):s)),void 0===s.Records||1!==s.Records.length)throw new Error(`directTransition: ERROR: Lambda was wrongly triggered with ${void 0===s.Records?0:s.Records.length} records`);console.log("webhook: INFO: Processing event "+JSON.stringify(s.Records.length,null,4));let i=[O(s.Records[0])];if(n&&(i=await n("webhook",!1,i)),!i.length)throw new Error("directFetch: ERROR: Processing complete.  Pre-worker hook rejected message.");const{msgBody:c,msgAttribs:l}=i[0];return await R(t,e,r,o,{msgBody:c,msgAttribs:l},a),"directTransition: INFO: Processing complete"}catch(t){throw console.log("directTransition: ERROR: "+Object(p.getErrorString)(t)),t}})(t,e,r,o,s,a,n),k=async(t,e,r)=>{let o="";if("object"==typeof e)o=e;else try{o=JSON.parse(e)}catch(t){return void console.log("Unable to parse the database file. Please check if it is a valid JSON document.")}return(async(t,e,r)=>{try{const o={service:r,configdata:e};return console.log("Data being sent "+JSON.stringify([o],null,4)),await h(t,[o],"vendorConfig"),console.log("Database has been setup successfully"),"Database has been setup successfully"}catch(t){throw console.log("bulkTransition: ERROR: "+Object(p.getErrorString)(t)),t}})(t,o,r)},I=async(t,e,r,o,s,a)=>(async(t,e,r,o,s,a)=>{try{console.log("getpostHttp: INFO: Input is: "+("object"==typeof a?JSON.stringify(a,null,4):a));const n="object"==typeof a?a:JSON.parse(a),i=n.body,c=n.pathParameters,l="undefined"!==n.queryStringParameters?n.queryStringParameters:{};return await b(t,`arn:aws:sns:${e}:${o}:event-bus`,{payload:{...c,...i,...l},context:null,metadata:{eventType:c.eventType}},{status:"trigger",operation:"fetch"===c.operation?"R":"C",entity:"product",entityId:s,eventId:d(),emitter:r,eventType:c.operation}),{statusCode:200,headers:{"Access-Control-Allow-Origin":"*","Access-Control-Allow-Credentials":!0},body:JSON.stringify({status:"getpostHttp: INFO: Request accepted and queued",input:a})}}catch(t){return console.log("getpostHttp: ERROR: "+Object(p.getErrorString)(t)),{statusCode:500,headers:{"Access-Control-Allow-Origin":"*","Access-Control-Allow-Credentials":!0},body:JSON.stringify({status:`getpostHttp: ERROR: We encountered an error. Please quote TS${Date.now()} as reference id for further assistance`,input:a})}}})(t,e,r,o,s,a)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,